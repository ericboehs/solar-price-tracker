name: CI

on:
  pull_request:
  push:
    branches: [ main ]

permissions:
  contents: read
  packages: write

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    # services:
    #  redis:
    #    image: redis
    #    ports:
    #      - 6379:6379
    #    options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libyaml-dev pkg-config google-chrome-stable bc jq

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests
        env:
          RAILS_ENV: test
          CI: true
          # REDIS_URL: redis://localhost:6379/0
        run: |
          bin/rails db:test:prepare test test:system

      - name: Extract coverage for badge
        id: coverage
        run: |
          if [ -f coverage/.last_run.json ]; then
            # Extract basic coverage percentage
            COVERAGE=$(cat coverage/.last_run.json | jq -r '.result.line')
            echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage: $COVERAGE%"
            
            # Extract detailed stats from the main resultset if available
            if [ -f coverage/.resultset.json ]; then
              # Create a Ruby script to extract detailed coverage stats
              cat > extract_coverage_stats.rb << 'RUBY_EOF'
require 'json'

begin
  resultset = JSON.parse(File.read('coverage/.resultset.json'))
  
  # Get the first (and usually only) test run data
  test_data = resultset.values.first
  
  if test_data && test_data['coverage']
    total_lines = 0
    covered_lines = 0
    
    test_data['coverage'].each do |file, lines|
      next unless file.start_with?('./app/') # Only count app files
      
      lines.each do |line_coverage|
        if line_coverage.is_a?(Integer) || line_coverage == 0
          total_lines += 1
          covered_lines += 1 if line_coverage && line_coverage > 0
        end
      end
    end
    
    missed_lines = total_lines - covered_lines
    
    puts "TOTAL_LINES=#{total_lines}"
    puts "COVERED_LINES=#{covered_lines}"
    puts "MISSED_LINES=#{missed_lines}"
  else
    puts "TOTAL_LINES=N/A"
    puts "COVERED_LINES=N/A"  
    puts "MISSED_LINES=N/A"
  end
rescue => e
  puts "TOTAL_LINES=N/A"
  puts "COVERED_LINES=N/A"
  puts "MISSED_LINES=N/A"
end
RUBY_EOF
              
              # Run the Ruby script and capture output
              STATS_OUTPUT=$(ruby extract_coverage_stats.rb)
              eval "$STATS_OUTPUT"
              rm extract_coverage_stats.rb
            else
              TOTAL_LINES="N/A"
              COVERED_LINES="N/A"
              MISSED_LINES="N/A"
            fi
            
            # Generate comprehensive coverage summary
            echo "## 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Overall Line Coverage: ${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Coverage breakdown
            echo "### 📈 Coverage Statistics" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Lines Covered** | ${COVERED_LINES} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total Lines** | ${TOTAL_LINES} |" >> $GITHUB_STEP_SUMMARY
            echo "| **Lines Missed** | ${MISSED_LINES} |" >> $GITHUB_STEP_SUMMARY
            
            if [ "$TOTAL_LINES" != "N/A" ] && [ "$TOTAL_LINES" -gt 0 ]; then
              echo "| **Coverage Ratio** | ${COVERED_LINES}/${TOTAL_LINES} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Add color-coded badge and feedback
            if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
              echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-brightgreen)" >> $GITHUB_STEP_SUMMARY
              echo "🟢 **Excellent coverage!** Keep up the great work!" >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-yellow)" >> $GITHUB_STEP_SUMMARY
              echo "🟡 **Good coverage.** Consider adding more tests to reach 90%." >> $GITHUB_STEP_SUMMARY
            elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
              echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-orange)" >> $GITHUB_STEP_SUMMARY
              echo "🟠 **Moderate coverage.** More tests needed to improve quality." >> $GITHUB_STEP_SUMMARY
            else
              echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-red)" >> $GITHUB_STEP_SUMMARY
              echo "🔴 **Low coverage.** Significant testing improvements needed." >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📋 [Download detailed HTML coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "percentage=0" >> $GITHUB_OUTPUT
            echo "## ❌ Coverage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Coverage report not generated. Check test execution logs." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  deploy:
    needs: [scan_ruby, scan_js, lint, test]
    name: Deploy
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    env:
      DOCKER_BUILDKIT: 1
      RAILS_ENV: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Deploy
        env:
          VERSION: ${{ github.sha }}
          KAMAL_REGISTRY_USERNAME: ${{ secrets.KAMAL_REGISTRY_USERNAME }}
          KAMAL_REGISTRY_PASSWORD: ${{ secrets.KAMAL_REGISTRY_PASSWORD }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          echo $RAILS_MASTER_KEY > config/master.key
          bundle exec kamal deploy --version=$VERSION
